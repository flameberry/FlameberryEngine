import os, platform, subprocess, glob, pathlib
from Logger import ColoredLogger
from Utils import Utils

class PhysXSDKRequirements:
    __PhysXRootDirectory = Utils.GetProjectDirectory() / 'Flameberry/vendor/PhysX'
    __ShouldTakePresetFromUser = True

    @classmethod
    def Validate(cls):
        innerBinDir = cls.__GetValidBuiltLibraryDirectory()
        if innerBinDir is None:
            ColoredLogger.Logger.warning(f'Nvidia PhysX libraries not found in {cls.__PhysXRootDirectory}')
            return False
        ColoredLogger.Logger.info(f'Found PhysX libraries in the directory: {innerBinDir}')
        return True

    @classmethod
    def BuildPhysXSDK(cls):
        # Find a PhysX build preset
        preset = '' if cls.__ShouldTakePresetFromUser else cls.__FindPreset(cls.__PhysXRootDirectory / 'physx/buildtools/presets/public')

        if preset != '': presetParam = [preset]
        else: presetParam = []

        try:
            # Generate PhysX Project Files
            if os.name == 'nt':
                params = [cls.__PhysXRootDirectory / 'physx/generate_projects.bat'] + presetParam
                subprocess.run(params)
            else:
                params = ['sh', cls.__PhysXRootDirectory / 'physx/generate_projects.sh'] + presetParam
                subprocess.run(params)
            
            # Build PhysX Libraries
            compilerDir = cls.__PhysXRootDirectory / 'physx/compiler'
            innerCompilerDirs = [x for x in os.listdir(compilerDir) if (compilerDir / x).is_dir() and preset in x]

            # Only relevant if preset is empty (selected by user in the previously called script)
            innerCompilerDirs.remove('public')

            for dir in innerCompilerDirs:
                # Build for multi-config generators like GNU Make
                if 'checked' in dir or 'release' in dir:
                    subprocess.run(["cmake", "--build", compilerDir / dir])
                    continue
                # Build for single-config generators like Xcode, Visual Studio
                for config in ('checked', 'release'):
                    subprocess.run(["cmake", "--build", compilerDir / dir, f"--config={config}"])
        except Exception as e:
            raise e
        
        # Write the newly built PhysX library paths
        innerBinDir = cls.__GetValidBuiltLibraryDirectory()
        includeDir = cls.__PhysXRootDirectory / 'physx/include'

        outputString = f'''
# Following code is generated by the generate_project.py script

set(PHYSX_INCLUDE_DIR "${{FBY_SOURCE_DIR}}/{includeDir.relative_to(Utils.GetProjectDirectory())}")
set(PHYSX_CHECKED_LIB_DIRECTORY "${{FBY_SOURCE_DIR}}/{innerBinDir.relative_to(Utils.GetProjectDirectory())}/checked")
set(PHYSX_RELEASE_LIB_DIRECTORY "${{FBY_SOURCE_DIR}}/{innerBinDir.relative_to(Utils.GetProjectDirectory())}/release")
set(PHYSX_COMPILE_DEFINITIONS NDEBUG)
'''
        cmakeEnvPhysXFile = open(Utils.GetProjectDirectory() / "CMake/envPhysX.cmake", "w")
        cmakeEnvPhysXFile.write(outputString)
        cmakeEnvPhysXFile.close()
    
    @classmethod
    def __FindPreset(cls, parent):
        for file in glob.glob(parent + "/*.xml"):
            filepath = pathlib.Path(file)

            # Choose preset based upon platform
            if platform.system() == "Windows":
                if "win64" and "vc17" in filepath.name:
                    return filepath.name
            elif platform.system() == "Darwin":
                is_arm = platform.machine() == "arm64"
                is_preset_for_arm = "arm64" in filepath.name
                if "mac" in filepath.name:
                    if (is_arm and is_preset_for_arm) or (not is_arm and not is_preset_for_arm):
                        return filepath.name
            elif platform.system() == "Linux":
                is_aarch = platform.machine() == "aarch64"
                is_preset_for_aarc = "aarch64" in filepath.name
                if "linux" in filepath.name:
                    if (is_aarch and is_preset_for_aarc) or (not is_aarch and not is_preset_for_aarc):
                        return filepath.name
        return None
    
    @classmethod
    def __GetValidBuiltLibraryDirectory(cls):
        if os.name == 'nt':
            requiredLibraryNames = [
                'PhysXCommon_64.dll',
                'PhysXCommon_64.dll',
                'PhysXCooking_64.dll',
                'PhysXFoundation_64.dll',
                'PhysXExtensions_64.dll'
            ]
        else:
            requiredLibraryNames = [
                'libPhysX_static_64.a',
                'libPhysXCommon_static_64.a',
                'libPhysXCooking_static_64.a',
                'libPhysXFoundation_static_64.a',
                'libPhysXExtensions_static_64.a'
            ]

        binDir = cls.__PhysXRootDirectory / 'physx/bin'
        innerBinDirs = [x for x in os.listdir(binDir) if (binDir / x).is_dir()]

        for dir in innerBinDirs: # example dir = macos.x86_64
            success = True
            for library in requiredLibraryNames:
                if not os.path.isfile(binDir / dir / 'checked' / library) or not os.path.isfile(binDir / dir / 'release' / library):
                    success = success and False
            if success: 
                return binDir / dir
        return None

if __name__ == '__main__':
    if not PhysXSDKRequirements.Validate():
        PhysXSDKRequirements.BuildPhysXSDK()