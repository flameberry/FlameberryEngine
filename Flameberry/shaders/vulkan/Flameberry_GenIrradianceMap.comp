#version 450

layout(set = 0, binding = 0) uniform samplerCube _FBY_u_Cubemap;
layout(set = 0, binding = 1, rgba32f) uniform writeonly imageCube _FBY_u_IrradianceMap;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "include/CubemapUtils.glsl"

vec3 ToneMap(vec3 color)
{
    // Tone Mapping
    vec3 newColor = color / (color + 1.0f);
    return newColor;
}

void main()
{
    // Get the size of the Irradiance Map
    const ivec2 imgSize = imageSize(_FBY_u_IrradianceMap);

    vec2 normalizedPixelCoords = vec2(gl_GlobalInvocationID.xy) / vec2(imgSize);
    normalizedPixelCoords = normalizedPixelCoords * 2.0f - 1.0f;
    vec3 normal = normalize(NormalizedToWorldPosition(int(gl_GlobalInvocationID.z), normalizedPixelCoords));

    vec3 irradiance = vec3(0.0);

    vec3 up    = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, normal));
    up         = normalize(cross(normal, right));

    float sampleDelta = 0.025;
    float nrSamples = 0.0;
    for (float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
    {
        for (float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
        {
            float cos_theta = cos(theta);
            float sin_theta = sin(theta);
            float cos_phi = cos(phi);
            float sin_phi = sin(phi);

            // spherical to cartesian (in tangent space)
            vec3 tangentSample = vec3(sin_theta * cos_phi,  sin_theta * sin_phi, cos_theta);
            // tangent space to world
            vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * normal; 

            vec3 sampledColor = ToneMap(texture(_FBY_u_Cubemap, sampleVec).rgb);
            // vec3 sampledColor = texture(_FBY_u_Cubemap, sampleVec).rgb;
            irradiance += sampledColor * cos_theta * sin_theta;
            nrSamples++;
        }
    }
    irradiance = PI * irradiance * (1.0 / float(nrSamples));

    imageStore(_FBY_u_IrradianceMap, ivec3(gl_GlobalInvocationID), vec4(irradiance, 1.0f));
}
