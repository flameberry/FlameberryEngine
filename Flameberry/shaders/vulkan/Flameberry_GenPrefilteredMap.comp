#version 450

#extension GL_EXT_nonuniform_qualifier : enable

layout (constant_id = 0) const int c_MipLevels = 8;

layout(set = 0, binding = 0) uniform samplerCube _FBY_u_Cubemap;
layout(set = 0, binding = 1, rgba32f) uniform writeonly imageCube _FBY_u_PrefilteredMapMipArray[c_MipLevels];

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "include/CubemapUtils.glsl"

int g_SampleCount = 64;

float max3(vec3 a) 
{
	return max(a.x, max(a.y, a.z));
}

// Normal Distribution function
float D_GGX(float dotNH, float roughness)
{
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;
	float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
	return (alpha2)/(PI * denom*denom); 
}

vec3 PrefilterEnvMap(vec3 R, float roughness, float envMapDim)
{
	vec3 N = R;
	vec3 V = R;
	vec3 color = vec3(0.0);
	float totalWeight = 0.0;

	for(uint i = 0u; i < g_SampleCount; i++) {
		vec2 Xi = Hammersley2d(i, g_SampleCount);
		vec3 H = ImportanceSample_GGX(Xi, roughness, N);
		vec3 L = 2.0 * dot(V, H) * H - V;
		float dotNL = clamp(dot(N, L), 0.0, 1.0);
		if (dotNL > 0.0) {
			// Filtering based on https://placeholderart.wordpress.com/2015/07/28/implementation-notes-runtime-environment-map-filtering-for-image-based-lighting/

			float dotNH = clamp(dot(N, H), 0.0, 1.0);
			float dotVH = clamp(dot(V, H), 0.0, 1.0);

			// Probability Distribution Function
			const float pdf = D_GGX(dotNH, roughness) * dotNH / (4.0 * dotVH) + 0.0001;
			// Slid angle of current smple
			const float omegaS = 1.0 / (float(g_SampleCount) * pdf);
			// Solid angle of 1 pixel across all cube faces
			const float omegaP = 4.0 * PI / (6.0 * envMapDim * envMapDim);
			// Biased (+1.0) mip level for better result
			const float mipLevel = roughness == 0.0 ? 0.0 : max(0.5 * log2(omegaS / omegaP) + 1.0, 0.0f);

			// The original _FBY_u_Cubemap contains HDR values
			const vec3 toneMaped = ToneMap(textureLod(_FBY_u_Cubemap, L, mipLevel).rgb * dotNL);
			color += toneMaped;
			totalWeight += dotNL;
		}
	}
	return (color / totalWeight);
}

void main()
{
    for (int i = 0; i < c_MipLevels; i++)
    {
        const ivec2 imgSize = imageSize(_FBY_u_PrefilteredMapMipArray[i]);

        if (any(greaterThanEqual(gl_GlobalInvocationID.xy, imgSize))) {
            continue; // Skip out-of-bounds threads
        }

        vec2 normalizedPixelCoords = vec2(gl_GlobalInvocationID.xy) / vec2(imgSize);
        normalizedPixelCoords = normalizedPixelCoords * 2.0f - 1.0f;
		vec3 worldPosition = NormalizedToWorldPosition(int(gl_GlobalInvocationID.z), normalizedPixelCoords);
        vec3 normal = normalize(worldPosition);

		float roughness = float(i) / float(c_MipLevels - 1);
		vec4 color = vec4(PrefilterEnvMap(normal, roughness, float(imgSize.x)), 1.0);

		// Store the color
		imageStore(_FBY_u_PrefilteredMapMipArray[i], ivec3(gl_GlobalInvocationID.xyz), color);
	}
}
