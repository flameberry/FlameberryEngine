#version 450

layout(set = 0, binding = 0, rg16f) uniform writeonly image2D _FBY_u_BRDFLUTMap;

layout (constant_id = 0) const int c_ImageSize = 512;

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#include "include/CubemapUtils.glsl"

#define NUM_SAMPLES 1024u

// Geometric Shadowing function
float G_SchlicksmithGGX(float dotNL, float dotNV, float roughness)
{
	float k = (roughness * roughness) / 2.0;
	float GL = dotNL / (dotNL * (1.0 - k) + k);
	float GV = dotNV / (dotNV * (1.0 - k) + k);
	return GL * GV;
}

vec2 BRDF(float NoV, float roughness)
{
	// Normal always points along z-axis for the 2D lookup 
	const vec3 N = vec3(0.0, 0.0, 1.0);
	vec3 V = vec3(sqrt(1.0 - NoV*NoV), 0.0, NoV);

	vec2 LUT = vec2(0.0);
	for(uint i = 0u; i < NUM_SAMPLES; i++) {
		vec2 Xi = Hammersley2d(i, NUM_SAMPLES);
		vec3 H = ImportanceSample_GGX(Xi, roughness, N);
		vec3 L = 2.0 * dot(V, H) * H - V;

		float dotNL = max(dot(N, L), 0.0);
		float dotNV = max(dot(N, V), 0.0);
		float dotVH = max(dot(V, H), 0.0); 
		float dotNH = max(dot(H, N), 0.0);

		if (dotNL > 0.0) {
			float G = G_SchlicksmithGGX(dotNL, dotNV, roughness);
			float G_Vis = (G * dotVH) / (dotNH * dotNV);
			float Fc = pow(1.0 - dotVH, 5.0);
			LUT += vec2((1.0 - Fc) * G_Vis, Fc * G_Vis);
		}
	}
	return LUT / float(NUM_SAMPLES);
}

void main() 
{
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / vec2(c_ImageSize);
    vec2 brdf = BRDF(uv.s, uv.t);
    imageStore(_FBY_u_BRDFLUTMap, ivec2(gl_GlobalInvocationID.xy), vec4(brdf, 0.0f, 0.0f));
}