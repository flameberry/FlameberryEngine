import os
import sys
import glob
import pathlib
import platform
import getopt
from Utils import *
from setup_cmake import setup_cmake
import subprocess


def find_preset(path: str) -> str:
    preset_files = glob.glob(path + "/*.xml")
    for file in preset_files:
        file_path = pathlib.Path(file)
        if file_path.is_file():
            # Choose preset based upon platform
            if platform.system() == "Windows":
                if "win64" and "vc17" in file_path.name:
                    return file_path.name
            elif platform.system() == "Darwin":
                is_arm = platform.machine() == "arm64"
                is_preset_for_arm = "arm64" in file_path.name
                if "mac" in file_path.name:
                    if (is_arm and is_preset_for_arm) or (not is_arm and not is_preset_for_arm):
                        return file_path.name
            elif platform.system() == "Linux":
                if "linux" in file_path.name:
                    # TODO: Choose if it is aarch64 or not
                    return file_path.name
    return ""


def find_exact_bin_dir(common_bin_dir: pathlib.Path):
    inner_bin_dirs = [pathlib.Path(common_bin_dir / x) for x in os.listdir(common_bin_dir) if (common_bin_dir / x).is_dir()]

    if not inner_bin_dirs:
        return None
    else:
        return inner_bin_dirs[0]


if __name__ == "__main__":
    project_dir = Utils.GetProjectDirectory()
    os.chdir(project_dir)
    search_results = setup_cmake()
    if not len(search_results):
        raise Exception("[FLAMEBERRY]: Failed to setup CMake! Stopping now...")

    cmake_path = pathlib.Path(search_results[0])
    os.environ["PATH"] += f";{str(cmake_path.parent)}"

    # Setup Nvidia PhysX
    print("[FLAMEBERRY]: Setting up Nvidia PhysX...")

    # Try and run the git command
    physX_url = "https://github.com/flameberry/PhysX"
    physX_path = project_dir / "Flameberry/vendor/PhysX"

    if not Utils.IsValidGitRepository(physX_path, physX_url):
        clone_process = subprocess.run(["git", "clone", physX_url, str(physX_path.resolve())])
        if clone_process.returncode != 0:
            # git must not be present
            raise Exception(f"Failed to clone repository: {physX_url}: using the git command!")
            # TODO: Clone manually instead

    physX_presets_path = physX_path / "physx/buildtools/presets/public"
    physX_preset = find_preset(str(physX_presets_path.resolve()))
    if not physX_preset:
        raise Exception("Platform specific preset for Nvidia PhysX not found!")

    physX_preset = physX_preset.removesuffix(".xml")
    print(f"[FLAMEBERRY]: Selected {physX_preset} preset for building Nvidia PhysX.")

    os.chdir(physX_path / "physx")

    # Generate Nvidia PhysX project files
    gen_process = None
    if platform.system() == "Windows":
        gen_process = subprocess.call([".\\generate_projects.bat", physX_preset])
    else:
        gen_process = subprocess.run(["sh", "./generate_projects.sh", physX_preset])

    if gen_process.returncode != 0:
        raise Exception(f"[FLAMEBERRY]: ERROR: Failed to generate Nvidia PhysX project files!")

    # Build Nvidia PhysX libraries
    physX_build_configs = ["checked", "release"]  # debug and profile configs aren't used by Flameberry yet
    physX_build_statuses = [False, False]

    for i in range(len(physX_build_configs)):
        build_process = subprocess.run(["cmake", "--build", f"compiler/{physX_preset}/", f"--config={physX_build_configs[i]}"])
        if build_process.returncode != 0:
            print(f"[FLAMEBERRY]: ERROR: Failed to build '{physX_build_configs[i]}' config library of Nvidia PhysX.")
        else:
            physX_build_statuses[i] = True

    if not any(physX_build_statuses):
        raise Exception("Failed to build any configuration of Nvidia PhysX library!")

    os.chdir(project_dir)
    physX_output_bin_dir = find_exact_bin_dir(physX_path / f"physx/bin")
    physX_include_dir = physX_path / "physx/include"

    physX_env_cmake_string = ""
    physX_env_cmake_string += f"# Following code is generated by the generate_project.py script\n\n"
    physX_env_cmake_string += f'set(PHYSX_INCLUDE_DIR "${{FBY_SOURCE_DIR}}/{physX_include_dir.relative_to(project_dir)}")\n'
    for config, status in zip(physX_build_configs, physX_build_statuses):
        if status:
            output_bin_dir_relative_path = (physX_output_bin_dir / config).resolve().relative_to(project_dir)
            physX_env_cmake_string += f'set(PHYSX_{config.upper()}_LIB_DIRECTORY "${{FBY_SOURCE_DIR}}/{output_bin_dir_relative_path}")\n'
        else:
            physX_env_cmake_string += f'set(PHYSX_{config.upper()}_LIB_DIRECTORY "")\n'
    physX_env_cmake_string += "set(PHYSX_COMPILE_DEFINITIONS NDEBUG)\n"

    # Update the Nvidia PhysX Library paths for Flameberry to use
    physX_env_cmake_file = open("CMake/envPhysX.cmake", "w")
    physX_env_cmake_file.write(physX_env_cmake_string)
    physX_env_cmake_file.close()

    # Assimp Setup
    print("[FLAMEBERRY]: Setting up Assimp...")

    assimp_path = project_dir / "Flameberry/vendor/Assimp"
    os.chdir(assimp_path)

    gen_params = ["cmake", "-S.", "-Bbuild/"]
    assimp_gen_proc = subprocess.run(gen_params)
    if assimp_gen_proc.returncode != 0:
        raise Exception("Failed to generate Assimp project files!")

    build_params = ["cmake", "--build", "build/"]
    assimp_build_proc = subprocess.run(build_params)
    if assimp_build_proc.returncode != 0:
        raise Exception("Failed to build the Assimp Library!")
    
    os.chdir(project_dir)
    cmake_build_type = "Release"
    if len(sys.argv):
        argumentList = sys.argv[1:]

        options = ":"
        long_options = ["config"]
        arguments, values = getopt.getopt(argumentList, options, long_options)

        for arg, val in arguments:
            if arg in "--config":
                cmake_build_type = str(val)

    cmake_params = ["cmake", f"-DCMAKE_BUILD_TYPE={cmake_build_type}", "-Wno-dev", "-S.", "-Bbuild/"]
    cmake_process = subprocess.run(cmake_params)
    if cmake_process.returncode == 0:
        print(f"[FLAMEBERRY]: Flameberry project files are generated at the path: {project_dir}/build/")
    else:
        raise Exception("[FLAMEBERRY]: Failed to generate project files!")
    
    dotnet_params = ["dotnet", "build", "Flameberry-ScriptCore/"]
    dotnet_process = subprocess.run(dotnet_params)
    if (dotnet_process.returncode != 0):
        raise Exception("[FLAMEBERRY]: Failed to build dotnet project: Flameberry-ScriptCore!")
